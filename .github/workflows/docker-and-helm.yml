name: Build & Release Internetaakafhandeling

on:
  push:
    branches: ["main"]
    tags: ["v*.*.*"]
  pull_request:
    branches: ["main"]

env:
  REGISTRY: ghcr.io
  WEB_IMAGE: ghcr.io/interne-taak-afhandeling/internetaakafhandeling.web
  POLLER_IMAGE: ghcr.io/interne-taak-afhandeling/internetaakafhandeling.poller
  SHOULD_PUSH: ${{ github.event_name != 'pull_request' }}
  IS_LATEST: false

permissions:
  contents: write
  packages: write
  id-token: write
  pages: write

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

    steps:
      - uses: actions/checkout@v4

      - name: "Find the latest release tag (determined by semver sort)"
        id: latest-semver
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          REPO_URL: ${{ github.event.repository.html_url }}
          TAG_FILTER: '^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$'
        run: |
          TAG=$(\
            git ls-remote --exit-code --refs --tags --sort='-v:refname' "$REPO_URL" \
            | awk '{print $2}' | grep -E "$TAG_FILTER" | head -n 1
          )
          echo "tag-ref=${TAG}" >> "$GITHUB_OUTPUT"
          if [ "$TAG" = "${{ github.ref }}" ] ; then
              echo "IS_LATEST=true" >> "$GITHUB_ENV"
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PACKAGE_SECRET }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          flavor: |
            latest=${{ env.IS_LATEST }}
          images: |
            ${{ env.WEB_IMAGE }}
            ${{ env.POLLER_IMAGE }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build & push Web image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: InterneTaakAfhandeling.Web.Server/Dockerfile
          push: ${{ fromJSON(env.SHOULD_PUSH) }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build & push Poller image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: InterneTaakAfhandeling.Poller/Dockerfile
          push: ${{ fromJSON(env.SHOULD_PUSH) }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release:
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    needs: build
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}
      cancel-in-progress: false
    steps:
      - uses: actions/checkout@v4

      - name: Install Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.8.1

      - name: Update chart values with new image tag
        uses: mikefarah/yq@v4.34.1
        env:
          VERSION: ${{ needs.build.outputs.version }}
        with:
          cmd: |
            yq eval '.appVersion = "${{ env.VERSION }}"' -i charts/internetaakafhandeling/Chart.yaml
            yq eval '.version = "${{ env.VERSION }}"' -i charts/internetaakafhandeling/Chart.yaml
            yq eval '.web.image.tag = "${{ env.VERSION }}"' -i charts/internetaakafhandeling/values.yaml
            yq eval '.poller.image.tag = "${{ env.VERSION }}"' -i charts/internetaakafhandeling/values.yaml

      - name: Set GitHub Pages URL
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          url=$(gh api "repos/$GITHUB_REPOSITORY/pages" --jq '.html_url')
          echo "PAGES_URL=$url" >> "$GITHUB_ENV"

      - name: Update chart dependencies
        working-directory: charts/internetaakafhandeling
        run: helm dependency update

      - name: Package chart and create new index
        working-directory: charts
        run: |
          helm package ./internetaakafhandeling
          curl --output _index.yaml ${{env.PAGES_URL}}/index.yaml || echo "No existing index"
          helm repo index . --url ${{env.PAGES_URL}} --merge ./_index.yaml
          mkdir -p ../pages
          mv index.yaml ../pages/
          mv *.tgz ../pages/

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: pages

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
